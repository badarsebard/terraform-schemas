{"format_version":"0.2","provider_schemas":{"registry.terraform.io/brainly/redshift":{"provider":{"version":0,"block":{"attributes":{"database":{"type":"string","description":"The name of the database to connect to. The default is `redshift`.","description_kind":"plain","optional":true},"host":{"type":"string","description":"Name of Redshift server address to connect to.","description_kind":"plain","optional":true},"max_connections":{"type":"number","description":"Maximum number of connections to establish to the database. Zero means unlimited.","description_kind":"plain","optional":true},"password":{"type":"string","description":"Password to be used if the Redshift server demands password authentication.","description_kind":"plain","optional":true,"sensitive":true},"port":{"type":"number","description":"The Redshift port number to connect to at the server host.","description_kind":"plain","optional":true},"sslmode":{"type":"string","description":"This option determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the Redshift server. Valid values are `require` (default, always SSL, also skip verification), `verify-ca` (always SSL, verify that the certificate presented by the server was signed by a trusted CA), `verify-full` (always SSL, verify that the certification presented by the server was signed by a trusted CA and the server host name matches the one in the certificate), `disable` (no SSL).","description_kind":"plain","optional":true},"username":{"type":"string","description":"Redshift user name to connect as.","description_kind":"plain","optional":true}},"block_types":{"temporary_credentials":{"nesting_mode":"list","block":{"attributes":{"auto_create_user":{"type":"bool","description":"Create a database user with the name specified for the user if one does not exist.","description_kind":"plain","optional":true},"cluster_identifier":{"type":"string","description":"The unique identifier of the cluster that contains the database for which you are requesting credentials. This parameter is case sensitive.","description_kind":"plain","required":true},"db_groups":{"type":["set","string"],"description":"A list of the names of existing database groups that the user will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to PUBLIC.","description_kind":"plain","optional":true},"duration_seconds":{"type":"number","description":"The number of seconds until the returned temporary password expires.","description_kind":"plain","optional":true}},"description":"Configuration for obtaining a temporary password using redshift:GetClusterCredentials","description_kind":"plain"},"max_items":1}},"description_kind":"plain"}},"resource_schemas":{"redshift_database":{"version":0,"block":{"attributes":{"connection_limit":{"type":"number","description":"The maximum number of concurrent connections that can be made to this database. A value of -1 means no limit.","description_kind":"plain","optional":true},"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"name":{"type":"string","description":"Name of the database","description_kind":"plain","required":true},"owner":{"type":"string","description":"Owner of the database, usually the user who created it","description_kind":"plain","optional":true,"computed":true}},"block_types":{"datashare_source":{"nesting_mode":"list","block":{"attributes":{"account_id":{"type":"string","description":"The AWS account ID of the producer cluster.","description_kind":"plain","optional":true,"computed":true},"namespace":{"type":"string","description":"The namespace (guid) of the producer cluster","description_kind":"plain","required":true},"share_name":{"type":"string","description":"The name of the datashare on the producer cluster","description_kind":"plain","required":true}},"description":"Configuration for creating a database from a redshift datashare.","description_kind":"plain"},"max_items":1}},"description":"Defines a local database.","description_kind":"plain"}},"redshift_datashare":{"version":0,"block":{"attributes":{"created":{"type":"string","description":"The date when datashare was created","description_kind":"plain","computed":true},"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"name":{"type":"string","description":"The name of the datashare.","description_kind":"plain","required":true},"owner":{"type":"string","description":"The user who owns the datashare.","description_kind":"plain","optional":true,"computed":true},"producer_account":{"type":"string","description":"The ID for the datashare producer account.","description_kind":"plain","computed":true},"producer_namespace":{"type":"string","description":"The unique cluster identifier for the datashare producer cluster.","description_kind":"plain","computed":true},"publicly_accessible":{"type":"bool","description":"Specifies whether the datashare can be shared to clusters that are publicly accessible. Default is `false`.","description_kind":"plain","optional":true},"schemas":{"type":["set","string"],"description":"Defines which schemas are exposed to the data share.","description_kind":"plain","optional":true}},"description":"\nDefines a Redshift datashare. Datashares allows a Redshift cluster (the \"consumer\") to\nread data stored in another Redshift cluster (the \"producer\"). For more information, see\nhttps://docs.aws.amazon.com/redshift/latest/dg/datashare-overview.html\n\nThe redshift_datashare resource should be defined on the producer cluster.\n\nNote: Data sharing is only supported on certain Redshift instance families,\nsuch as RA3.\n","description_kind":"plain"}},"redshift_datashare_privilege":{"version":0,"block":{"attributes":{"account":{"type":"string","description":"AWS account ID where the consumer cluster is located, for sharing data across accounts. Either this or `namespace` must be specified.","description_kind":"plain","optional":true},"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"namespace":{"type":"string","description":"Namespace (guid) of the consumer cluster, for sharing data within the same account. Either this or `account` must be specified.","description_kind":"plain","optional":true},"share_date":{"type":"string","description":"When the datashare permission was granted","description_kind":"plain","computed":true},"share_name":{"type":"string","description":"Name of the datashare","description_kind":"plain","required":true}},"description":"Manages consumer permissions for [data sharing](https://docs.aws.amazon.com/redshift/latest/dg/datashare-overview.html).\n\nWhen managing datashare permissions between clusters in the same account, set the `namespace` to the consumer's namespace guid, and omit the `account`.\n\nWhen managing data share permissions across AWS accounts, set the `account` to the consumer's AWS account ID, and omit the `namespace`.\nAfter creating the privilege through terraform, you will also need to [authorize the cross-account datashare through the AWS console](https://docs.aws.amazon.com/redshift/latest/dg/across-account.html) before consumer clusters can access it.\n\nNote: Data sharing is only supported on certain instance families, such as RA3.","description_kind":"plain"}},"redshift_default_privileges":{"version":0,"block":{"attributes":{"group":{"type":"string","description":"The name of the group to which grant default privileges on.","description_kind":"plain","required":true},"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"object_type":{"type":"string","description":"The Redshift object type to set the default privileges on (one of: table).","description_kind":"plain","required":true},"owner":{"type":"string","description":"Target user for which to alter default privileges.","description_kind":"plain","required":true},"privileges":{"type":["set","string"],"description":"The list of privileges to apply as default privileges. See [ALTER DEFAULT PRIVILEGES command documentation](https://docs.aws.amazon.com/redshift/latest/dg/r_ALTER_DEFAULT_PRIVILEGES.html) to see what privileges are available to which object type.","description_kind":"plain","required":true},"schema":{"type":"string","description":"The database schema to set default privileges for this group.","description_kind":"plain","optional":true}},"description":"Defines the default set of access privileges to be applied to objects that are created in the future by the specified user. By default, users can change only their own default access privileges. Only a superuser can specify default privileges for other users.","description_kind":"plain"}},"redshift_grant":{"version":0,"block":{"attributes":{"group":{"type":"string","description":"The name of the group to grant privileges on.","description_kind":"plain","required":true},"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"object_type":{"type":"string","description":"The Redshift object type to grant privileges on (one of: table, schema, database).","description_kind":"plain","required":true},"objects":{"type":["set","string"],"description":"The objects upon which to grant the privileges. An empty list (the default) means to grant permissions on all objects of the specified type. Only has effect if `object_type` is set to `table`.","description_kind":"plain","optional":true},"privileges":{"type":["set","string"],"description":"The list of privileges to apply as default privileges. See [GRANT command documentation](https://docs.aws.amazon.com/redshift/latest/dg/r_GRANT.html) to see what privileges are available to which object type. An empty list could be provided to revoke all privileges for this group","description_kind":"plain","required":true},"schema":{"type":"string","description":"The database schema to grant privileges on for this group.","description_kind":"plain","optional":true}},"description":"\nDefines access privileges for user group. Privileges include access options such as being able to read data in tables and views, write data, create tables, and drop tables. Use this command to give specific privileges for a table, database, schema, function, procedure, language, or column.\n","description_kind":"plain"}},"redshift_group":{"version":0,"block":{"attributes":{"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"name":{"type":"string","description":"Name of the user group. Group names beginning with two underscores are reserved for Amazon Redshift internal use.","description_kind":"plain","required":true},"users":{"type":["set","string"],"description":"List of the user names to add to the group","description_kind":"plain","optional":true}},"description":"\nGroups are collections of users who are all granted whatever privileges are associated with the group. You can use groups to assign privileges by role. For example, you can create different groups for sales, administration, and support and give the users in each group the appropriate access to the data they require for their work. You can grant or revoke privileges at the group level, and those changes will apply to all members of the group, except for superusers.\n","description_kind":"plain"}},"redshift_privilege":{"version":0,"block":{"attributes":{"group":{"type":"string","description":"The name of the group to grant privileges on.","description_kind":"plain","required":true},"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"object_type":{"type":"string","description":"The Redshift object type to grant the privileges on (one of: schema, table).","description_kind":"plain","required":true},"privileges":{"type":["set","string"],"description":"The list of privileges to grant. See [GRANT SQL command documentation](https://docs.aws.amazon.com/redshift/latest/dg/r_GRANT.html) to see what privileges are available to which object type.","description_kind":"plain","required":true},"schema":{"type":"string","description":"The database schema to grant privileges on for this group.","description_kind":"plain","optional":true}},"description":"\nWhen you create a database object, you are its owner. By default, only a superuser or the owner of an object can query, modify, or grant privileges on the object. For users to use an object, you must grant the necessary privileges to the user or the group that contains the user. Database superusers have the same privileges as database owners.\n","description_kind":"plain"}},"redshift_schema":{"version":0,"block":{"attributes":{"cascade_on_delete":{"type":"bool","description":"Indicates to automatically drop all objects in the schema. The default action is TO NOT drop a schema if it contains any objects.","description_kind":"plain","optional":true},"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"name":{"type":"string","description":"Name of the schema. The schema name can't be `PUBLIC`.","description_kind":"plain","required":true},"owner":{"type":"string","description":"Name of the schema owner.","description_kind":"plain","optional":true,"computed":true},"quota":{"type":"number","description":"The maximum amount of disk space that the specified schema can use. GB is the default unit of measurement.","description_kind":"plain","optional":true}},"block_types":{"external_schema":{"nesting_mode":"list","block":{"attributes":{"database_name":{"type":"string","description":"The database where the external schema can be found","description_kind":"plain","required":true}},"block_types":{"data_catalog_source":{"nesting_mode":"list","block":{"attributes":{"catalog_role_arns":{"type":["list","string"],"description":"The Amazon Resource Name (ARN) for the IAM roles that your cluster uses for authentication and authorization for the data catalog.\n\tIf this is not specified, Amazon Redshift uses the specified iam_role_arns. The catalog role must have permission to access the Data Catalog in AWS Glue or Athena.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-iam-policies.html.\n\n  To chain roles, you establish a trust relationship between the roles. A role that assumes another role must have a permissions policy that allows it to assume the specified role.\n\tIn turn, the role that passes permissions must have a trust policy that allows it to pass its permissions to another role.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/mgmt/authorizing-redshift-service.html#authorizing-redshift-service-chaining-roles","description_kind":"plain","optional":true},"create_external_database_if_not_exists":{"type":"bool","description":"When enabled, creates an external database with the name specified by the database argument,\n\tif the specified external database doesn't exist. If the specified external database exists, the command makes no changes.\n\tIn this case, the command returns a message that the external database exists, rather than terminating with an error.\n\n  To use create_external_database_if_not_exists with a Data Catalog enabled for AWS Lake Formation, you need CREATE_DATABASE permission on the Data Catalog.","description_kind":"plain","optional":true},"iam_role_arns":{"type":["list","string"],"description":"The Amazon Resource Name (ARN) for the IAM roles that your cluster uses for authentication and authorization.\n\tAs a minimum, the IAM roles must have permission to perform a LIST operation on the Amazon S3 bucket to be accessed and a GET operation on the Amazon S3 objects the bucket contains.\n  If the external database is defined in an Amazon Athena data catalog or the AWS Glue Data Catalog, the IAM role must have permission to access Athena unless catalog_role is specified.\n  For more information, see https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-iam-policies.html.\n\n  When you attach a role to your cluster, your cluster can assume that role to access Amazon S3, Athena, and AWS Glue on your behalf.\n  If a role attached to your cluster doesn't have access to the necessary resources, you can chain another role, possibly belonging to another account.\n\tYour cluster then temporarily assumes the chained role to access the data. You can also grant cross-account access by chaining roles.\n\tYou can chain a maximum of 10 roles. Each role in the chain assumes the next role in the chain, until the cluster assumes the role at the end of chain.\n\n  To chain roles, you establish a trust relationship between the roles. A role that assumes another role must have a permissions policy that allows it to assume the specified role.\n\tIn turn, the role that passes permissions must have a trust policy that allows it to pass its permissions to another role.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/mgmt/authorizing-redshift-service.html#authorizing-redshift-service-chaining-roles","description_kind":"plain","required":true},"region":{"type":"string","description":"If the external database is defined in an Athena data catalog or the AWS Glue Data Catalog, the AWS Region in which the database is located. This parameter is required if the database is defined in an external Data Catalog.","description_kind":"plain","optional":true}},"description":"Configures the external schema from the AWS Glue Data Catalog","description_kind":"plain"},"max_items":1},"hive_metastore_source":{"nesting_mode":"list","block":{"attributes":{"hostname":{"type":"string","description":"The hostname of the hive metastore database.","description_kind":"plain","required":true},"iam_role_arns":{"type":["list","string"],"description":"The Amazon Resource Name (ARN) for the IAM roles that your cluster uses for authentication and authorization.\n\tAs a minimum, the IAM roles must have permission to perform a LIST operation on the Amazon S3 bucket to be accessed and a GET operation on the Amazon S3 objects the bucket contains.\n\tIf the external database is defined in an Amazon Athena data catalog or the AWS Glue Data Catalog, the IAM role must have permission to access Athena unless catalog_role is specified.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-iam-policies.html.\n\n  When you attach a role to your cluster, your cluster can assume that role to access Amazon S3, Athena, and AWS Glue on your behalf.\n\tIf a role attached to your cluster doesn't have access to the necessary resources, you can chain another role, possibly belonging to another account.\n\tYour cluster then temporarily assumes the chained role to access the data. You can also grant cross-account access by chaining roles.\n\tYou can chain a maximum of 10 roles. Each role in the chain assumes the next role in the chain, until the cluster assumes the role at the end of chain.\n\n  To chain roles, you establish a trust relationship between the roles. A role that assumes another role must have a permissions policy that allows it to assume the specified role.\n\tIn turn, the role that passes permissions must have a trust policy that allows it to pass its permissions to another role.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/mgmt/authorizing-redshift-service.html#authorizing-redshift-service-chaining-roles","description_kind":"plain","required":true},"port":{"type":"number","description":"The port number of the hive metastore. The default port number is 9083.","description_kind":"plain","optional":true}},"description":"Configures the external schema from a Hive Metastore.","description_kind":"plain"},"max_items":1},"rds_mysql_source":{"nesting_mode":"list","block":{"attributes":{"hostname":{"type":"string","description":"The hostname of the head node of the MySQL database replica set.","description_kind":"plain","required":true},"iam_role_arns":{"type":["list","string"],"description":"The Amazon Resource Name (ARN) for the IAM roles that your cluster uses for authentication and authorization.\n\tAs a minimum, the IAM roles must have permission to perform a LIST operation on the Amazon S3 bucket to be accessed and a GET operation on the Amazon S3 objects the bucket contains.\n\tIf the external database is defined in an Amazon Athena data catalog or the AWS Glue Data Catalog, the IAM role must have permission to access Athena unless catalog_role is specified.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-iam-policies.html.\n\n  When you attach a role to your cluster, your cluster can assume that role to access Amazon S3, Athena, and AWS Glue on your behalf.\n\tIf a role attached to your cluster doesn't have access to the necessary resources, you can chain another role, possibly belonging to another account.\n\tYour cluster then temporarily assumes the chained role to access the data. You can also grant cross-account access by chaining roles.\n\tYou can chain a maximum of 10 roles. Each role in the chain assumes the next role in the chain, until the cluster assumes the role at the end of chain.\n\n  To chain roles, you establish a trust relationship between the roles. A role that assumes another role must have a permissions policy that allows it to assume the specified role.\n\tIn turn, the role that passes permissions must have a trust policy that allows it to pass its permissions to another role.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/mgmt/authorizing-redshift-service.html#authorizing-redshift-service-chaining-roles","description_kind":"plain","required":true},"port":{"type":"number","description":"The port number of the MySQL database. The default port number is 3306.","description_kind":"plain","optional":true},"secret_arn":{"type":"string","description":"The Amazon Resource Name (ARN) of a supported MySQL database engine secret created using AWS Secrets Manager.\n\tFor information about how to create and retrieve an ARN for a secret, see https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_create-basic-secret.html\n\tand https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_retrieve-secret.html in the AWS Secrets Manager User Guide.","description_kind":"plain","required":true}},"description":"Configures the external schema to reference data using a federated query to RDS MYSQL or Aurora MySQL.","description_kind":"plain"},"max_items":1},"rds_postgres_source":{"nesting_mode":"list","block":{"attributes":{"hostname":{"type":"string","description":"The hostname of the head node of the PostgreSQL database replica set.","description_kind":"plain","required":true},"iam_role_arns":{"type":["list","string"],"description":"The Amazon Resource Name (ARN) for the IAM roles that your cluster uses for authentication and authorization.\n\tAs a minimum, the IAM roles must have permission to perform a LIST operation on the Amazon S3 bucket to be accessed and a GET operation on the Amazon S3 objects the bucket contains.\n\tIf the external database is defined in an Amazon Athena data catalog or the AWS Glue Data Catalog, the IAM role must have permission to access Athena unless catalog_role is specified.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-iam-policies.html.\n\n  When you attach a role to your cluster, your cluster can assume that role to access Amazon S3, Athena, and AWS Glue on your behalf.\n\tIf a role attached to your cluster doesn't have access to the necessary resources, you can chain another role, possibly belonging to another account.\n\tYour cluster then temporarily assumes the chained role to access the data. You can also grant cross-account access by chaining roles.\n\tYou can chain a maximum of 10 roles. Each role in the chain assumes the next role in the chain, until the cluster assumes the role at the end of chain.\n\n  To chain roles, you establish a trust relationship between the roles. A role that assumes another role must have a permissions policy that allows it to assume the specified role.\n\tIn turn, the role that passes permissions must have a trust policy that allows it to pass its permissions to another role.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/mgmt/authorizing-redshift-service.html#authorizing-redshift-service-chaining-roles","description_kind":"plain","required":true},"port":{"type":"number","description":"The port number of the PostgreSQL database. The default port number is 5432.","description_kind":"plain","optional":true},"schema":{"type":"string","description":"The name of the PostgreSQL schema. The default schema is 'public'","description_kind":"plain","optional":true},"secret_arn":{"type":"string","description":"The Amazon Resource Name (ARN) of a supported PostgreSQL database engine secret created using AWS Secrets Manager.\n\tFor information about how to create and retrieve an ARN for a secret, see https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_create-basic-secret.html\n\tand https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_retrieve-secret.html in the AWS Secrets Manager User Guide.","description_kind":"plain","required":true}},"description":"Configures the external schema to reference data using a federated query to RDS POSTGRES or Aurora PostgreSQL.","description_kind":"plain"},"max_items":1},"redshift_source":{"nesting_mode":"list","block":{"attributes":{"schema":{"type":"string","description":"The name of the datashare schema. The default schema is 'public'.","description_kind":"plain","optional":true}},"description":"Configures the external schema to reference datashare database.","description_kind":"plain"},"max_items":1}},"description":"Configures the schema as an external schema. See https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_SCHEMA.html","description_kind":"plain"},"max_items":1}},"description":"\nA database contains one or more named schemas. Each schema in a database contains tables and other kinds of named objects. By default, a database has a single schema, which is named PUBLIC. You can use schemas to group database objects under a common name. Schemas are similar to file system directories, except that schemas cannot be nested.\n","description_kind":"plain"}},"redshift_user":{"version":0,"block":{"attributes":{"connection_limit":{"type":"number","description":"The maximum number of database connections the user is permitted to have open concurrently. The limit isn't enforced for superusers.","description_kind":"plain","optional":true},"create_database":{"type":"bool","description":"Allows the user to create new databases. By default user can't create new databases.","description_kind":"plain","optional":true},"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"name":{"type":"string","description":"The name of the user account to create. The user name can't be `PUBLIC`.","description_kind":"plain","required":true},"password":{"type":"string","description":"Sets the user's password. Users can change their own passwords, unless the password is disabled. To disable password, omit this parameter or set it to `null`.","description_kind":"plain","optional":true,"sensitive":true},"superuser":{"type":"bool","description":"Determine whether the user is a superuser with all database privileges.","description_kind":"plain","optional":true},"syslog_access":{"type":"string","description":"A clause that specifies the level of access that the user has to the Amazon Redshift system tables and views. If `RESTRICTED` (default) is specified, the user can see only the rows generated by that user in user-visible system tables and views. If `UNRESTRICTED` is specified, the user can see all rows in user-visible system tables and views, including rows generated by another user. `UNRESTRICTED` doesn't give a regular user access to superuser-visible tables. Only superusers can see superuser-visible tables.","description_kind":"plain","optional":true},"valid_until":{"type":"string","description":"Sets a date and time after which the user's password is no longer valid. By default the password has no time limit.","description_kind":"plain","optional":true}},"description":"\nAmazon Redshift user accounts can only be created and dropped by a database superuser. Users are authenticated when they login to Amazon Redshift. They can own databases and database objects (for example, tables) and can grant privileges on those objects to users, groups, and schemas to control who has access to which object. Users with CREATE DATABASE rights can create databases and grant privileges to those databases. Superusers have database ownership privileges for all databases.\n","description_kind":"plain"}}},"data_source_schemas":{"redshift_database":{"version":0,"block":{"attributes":{"connection_limit":{"type":"number","description":"The maximum number of concurrent connections that can be made to this database. A value of -1 means no limit.","description_kind":"plain","computed":true},"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"name":{"type":"string","description":"Name of the database","description_kind":"plain","required":true},"owner":{"type":"string","description":"Owner of the database, usually the user who created it","description_kind":"plain","computed":true}},"block_types":{"datashare_source":{"nesting_mode":"list","block":{"attributes":{"account_id":{"type":"string","description":"The AWS account ID of the producer cluster.","description_kind":"plain","optional":true,"computed":true},"namespace":{"type":"string","description":"The namespace (guid) of the producer cluster","description_kind":"plain","optional":true,"computed":true},"share_name":{"type":"string","description":"The name of the datashare on the producer cluster","description_kind":"plain","optional":true,"computed":true}},"description":"Configuration for a database created from a redshift datashare.","description_kind":"plain"},"max_items":1}},"description":"Fetches information about a Redshift database.","description_kind":"plain"}},"redshift_group":{"version":0,"block":{"attributes":{"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"name":{"type":"string","description":"Name of the user group. Group names beginning with two underscores are reserved for Amazon Redshift internal use.","description_kind":"plain","required":true},"users":{"type":["set","string"],"description":"List of the user names who belong to the group","description_kind":"plain","computed":true}},"description":"\nGroups are collections of users who are all granted whatever privileges are associated with the group. You can use groups to assign privileges by role. For example, you can create different groups for sales, administration, and support and give the users in each group the appropriate access to the data they require for their work. You can grant or revoke privileges at the group level, and those changes will apply to all members of the group, except for superusers.\n\t\t","description_kind":"plain"}},"redshift_namespace":{"version":0,"block":{"attributes":{"id":{"type":"string","description_kind":"plain","optional":true,"computed":true}},"description":"Gets the cluster namespace (unique ID) of the Amazon Redshift cluster.","description_kind":"plain"}},"redshift_schema":{"version":0,"block":{"attributes":{"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"name":{"type":"string","description":"Name of the schema.","description_kind":"plain","required":true},"owner":{"type":"string","description":"Name of the schema owner.","description_kind":"plain","computed":true},"quota":{"type":"number","description":"The maximum amount of disk space that the specified schema can use. GB is the default unit of measurement.","description_kind":"plain","computed":true}},"block_types":{"external_schema":{"nesting_mode":"list","block":{"attributes":{"database_name":{"type":"string","description":"The database where the external schema can be found","description_kind":"plain","computed":true}},"block_types":{"data_catalog_source":{"nesting_mode":"list","block":{"attributes":{"catalog_role_arns":{"type":["list","string"],"description":"The Amazon Resource Name (ARN) for the IAM roles that your cluster uses for authentication and authorization for the data catalog.\n\tIf this is not specified, Amazon Redshift uses the specified iam_role_arns. The catalog role must have permission to access the Data Catalog in AWS Glue or Athena.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-iam-policies.html.\n\n\tTo chain roles, you establish a trust relationship between the roles. A role that assumes another role must have a permissions policy that allows it to assume the specified role.\n\tIn turn, the role that passes permissions must have a trust policy that allows it to pass its permissions to another role.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/mgmt/authorizing-redshift-service.html#authorizing-redshift-service-chaining-roles","description_kind":"plain","optional":true,"computed":true},"iam_role_arns":{"type":["list","string"],"description":"The Amazon Resource Name (ARN) for the IAM roles that your cluster uses for authentication and authorization.\n\tAs a minimum, the IAM roles must have permission to perform a LIST operation on the Amazon S3 bucket to be accessed and a GET operation on the Amazon S3 objects the bucket contains.\n\tIf the external database is defined in an Amazon Athena data catalog or the AWS Glue Data Catalog, the IAM role must have permission to access Athena unless catalog_role is specified.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-iam-policies.html.\n\n\tWhen you attach a role to your cluster, your cluster can assume that role to access Amazon S3, Athena, and AWS Glue on your behalf.\n\tIf a role attached to your cluster doesn't have access to the necessary resources, you can chain another role, possibly belonging to another account.\n\tYour cluster then temporarily assumes the chained role to access the data. You can also grant cross-account access by chaining roles.\n\tYou can chain a maximum of 10 roles. Each role in the chain assumes the next role in the chain, until the cluster assumes the role at the end of chain.\n\n\tTo chain roles, you establish a trust relationship between the roles. A role that assumes another role must have a permissions policy that allows it to assume the specified role.\n\tIn turn, the role that passes permissions must have a trust policy that allows it to pass its permissions to another role.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/mgmt/authorizing-redshift-service.html#authorizing-redshift-service-chaining-roles","description_kind":"plain","computed":true},"region":{"type":"string","description":"If the external database is defined in an Athena data catalog or the AWS Glue Data Catalog, the AWS Region in which the database is located. This parameter is required if the database is defined in an external Data Catalog.","description_kind":"plain","optional":true,"computed":true}},"description":"Configures the external schema from the AWS Glue Data Catalog","description_kind":"plain"},"max_items":1},"hive_metastore_source":{"nesting_mode":"list","block":{"attributes":{"hostname":{"type":"string","description":"The hostname of the hive metastore database.","description_kind":"plain","computed":true},"iam_role_arns":{"type":["list","string"],"description":"The Amazon Resource Name (ARN) for the IAM roles that your cluster uses for authentication and authorization.\n\tAs a minimum, the IAM roles must have permission to perform a LIST operation on the Amazon S3 bucket to be accessed and a GET operation on the Amazon S3 objects the bucket contains.\n\tIf the external database is defined in an Amazon Athena data catalog or the AWS Glue Data Catalog, the IAM role must have permission to access Athena unless catalog_role is specified.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-iam-policies.html.\n\n\tWhen you attach a role to your cluster, your cluster can assume that role to access Amazon S3, Athena, and AWS Glue on your behalf.\n\tIf a role attached to your cluster doesn't have access to the necessary resources, you can chain another role, possibly belonging to another account.\n\tYour cluster then temporarily assumes the chained role to access the data. You can also grant cross-account access by chaining roles.\n\tYou can chain a maximum of 10 roles. Each role in the chain assumes the next role in the chain, until the cluster assumes the role at the end of chain.\n\n\tTo chain roles, you establish a trust relationship between the roles. A role that assumes another role must have a permissions policy that allows it to assume the specified role.\n\tIn turn, the role that passes permissions must have a trust policy that allows it to pass its permissions to another role.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/mgmt/authorizing-redshift-service.html#authorizing-redshift-service-chaining-roles","description_kind":"plain","computed":true},"port":{"type":"number","description":"The port number of the hive metastore. The default port number is 9083.","description_kind":"plain","optional":true,"computed":true}},"description":"Configures the external schema from a Hive Metastore.","description_kind":"plain"},"max_items":1},"rds_mysql_source":{"nesting_mode":"list","block":{"attributes":{"hostname":{"type":"string","description":"The hostname of the head node of the MySQL database replica set.","description_kind":"plain","computed":true},"iam_role_arns":{"type":["list","string"],"description":"The Amazon Resource Name (ARN) for the IAM roles that your cluster uses for authentication and authorization.\n\tAs a minimum, the IAM roles must have permission to perform a LIST operation on the Amazon S3 bucket to be accessed and a GET operation on the Amazon S3 objects the bucket contains.\n\tIf the external database is defined in an Amazon Athena data catalog or the AWS Glue Data Catalog, the IAM role must have permission to access Athena unless catalog_role is specified.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-iam-policies.html.\n\n\tWhen you attach a role to your cluster, your cluster can assume that role to access Amazon S3, Athena, and AWS Glue on your behalf.\n\tIf a role attached to your cluster doesn't have access to the necessary resources, you can chain another role, possibly belonging to another account.\n\tYour cluster then temporarily assumes the chained role to access the data. You can also grant cross-account access by chaining roles.\n\tYou can chain a maximum of 10 roles. Each role in the chain assumes the next role in the chain, until the cluster assumes the role at the end of chain.\n\n\tTo chain roles, you establish a trust relationship between the roles. A role that assumes another role must have a permissions policy that allows it to assume the specified role.\n\tIn turn, the role that passes permissions must have a trust policy that allows it to pass its permissions to another role.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/mgmt/authorizing-redshift-service.html#authorizing-redshift-service-chaining-roles","description_kind":"plain","computed":true},"port":{"type":"number","description":"The port number of the MySQL database. The default port number is 3306.","description_kind":"plain","optional":true,"computed":true},"secret_arn":{"type":"string","description":"The Amazon Resource Name (ARN) of a supported MySQL database engine secret created using AWS Secrets Manager.\n\tFor information about how to create and retrieve an ARN for a secret, see https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_create-basic-secret.html\n\tand https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_retrieve-secret.html in the AWS Secrets Manager User Guide.","description_kind":"plain","computed":true}},"description":"Configures the external schema to reference data using a federated query to RDS MYSQL or Aurora MySQL.","description_kind":"plain"},"max_items":1},"rds_postgres_source":{"nesting_mode":"list","block":{"attributes":{"hostname":{"type":"string","description":"The hostname of the head node of the PostgreSQL database replica set.","description_kind":"plain","computed":true},"iam_role_arns":{"type":["list","string"],"description":"The Amazon Resource Name (ARN) for the IAM roles that your cluster uses for authentication and authorization.\n\tAs a minimum, the IAM roles must have permission to perform a LIST operation on the Amazon S3 bucket to be accessed and a GET operation on the Amazon S3 objects the bucket contains.\n\tIf the external database is defined in an Amazon Athena data catalog or the AWS Glue Data Catalog, the IAM role must have permission to access Athena unless catalog_role is specified.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-iam-policies.html.\n\n\tWhen you attach a role to your cluster, your cluster can assume that role to access Amazon S3, Athena, and AWS Glue on your behalf.\n\tIf a role attached to your cluster doesn't have access to the necessary resources, you can chain another role, possibly belonging to another account.\n\tYour cluster then temporarily assumes the chained role to access the data. You can also grant cross-account access by chaining roles.\n\tYou can chain a maximum of 10 roles. Each role in the chain assumes the next role in the chain, until the cluster assumes the role at the end of chain.\n\n\tTo chain roles, you establish a trust relationship between the roles. A role that assumes another role must have a permissions policy that allows it to assume the specified role.\n\tIn turn, the role that passes permissions must have a trust policy that allows it to pass its permissions to another role.\n\tFor more information, see https://docs.aws.amazon.com/redshift/latest/mgmt/authorizing-redshift-service.html#authorizing-redshift-service-chaining-roles","description_kind":"plain","computed":true},"port":{"type":"number","description":"The port number of the PostgreSQL database. The default port number is 5432.","description_kind":"plain","optional":true,"computed":true},"schema":{"type":"string","description":"The name of the PostgreSQL schema. The default schema is 'public'","description_kind":"plain","optional":true,"computed":true},"secret_arn":{"type":"string","description":"The Amazon Resource Name (ARN) of a supported PostgreSQL database engine secret created using AWS Secrets Manager.\n\tFor information about how to create and retrieve an ARN for a secret, see https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_create-basic-secret.html\n\tand https://docs.aws.amazon.com/secretsmanager/latest/userguide/manage_retrieve-secret.html in the AWS Secrets Manager User Guide.","description_kind":"plain","computed":true}},"description":"Configures the external schema to reference data using a federated query to RDS POSTGRES or Aurora PostgreSQL.","description_kind":"plain"},"max_items":1},"redshift_source":{"nesting_mode":"list","block":{"attributes":{"schema":{"type":"string","description":"The name of the datashare schema. The default schema is 'public'.","description_kind":"plain","optional":true,"computed":true}},"description":"Configures the external schema to reference datashare database.","description_kind":"plain"},"max_items":1}},"description":"Configures the schema as an external schema. See https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_SCHEMA.html","description_kind":"plain"},"max_items":1}},"description":"\nA database contains one or more named schemas. Each schema in a database contains tables and other kinds of named objects. By default, a database has a single schema, which is named PUBLIC. You can use schemas to group database objects under a common name. Schemas are similar to file system directories, except that schemas cannot be nested.\n","description_kind":"plain"}},"redshift_user":{"version":0,"block":{"attributes":{"connection_limit":{"type":"number","description":"The maximum number of database connections the user is permitted to have open concurrently. The limit isn't enforced for superusers.","description_kind":"plain","computed":true},"create_database":{"type":"bool","description":"Indicates whether the user is allowed to create new databases.","description_kind":"plain","computed":true},"id":{"type":"string","description_kind":"plain","optional":true,"computed":true},"name":{"type":"string","description":"The name of the user account. The user name can't be `PUBLIC`.","description_kind":"plain","required":true},"superuser":{"type":"bool","description":"Indicates whether the user is a superuser with all database privileges.","description_kind":"plain","computed":true},"syslog_access":{"type":"string","description":"A clause that specifies the level of access that the user has to the Amazon Redshift system tables and views. If `RESTRICTED` (default) is specified, the user can see only the rows generated by that user in user-visible system tables and views. If `UNRESTRICTED` is specified, the user can see all rows in user-visible system tables and views, including rows generated by another user. `UNRESTRICTED` doesn't give a regular user access to superuser-visible tables. Only superusers can see superuser-visible tables.","description_kind":"plain","computed":true},"valid_until":{"type":"string","description":"Date and time after which the user's password is no longer valid. By default the password has no time limit.","description_kind":"plain","computed":true}},"description":"\nThis data source can be used to fetch information about a specific database user. Users are authenticated when they login to Amazon Redshift. They can own databases and database objects (for example, tables) and can grant privileges on those objects to users, groups, and schemas to control who has access to which object. Users with CREATE DATABASE rights can create databases and grant privileges to those databases. Superusers have database ownership privileges for all databases.\n","description_kind":"plain"}}}}}}
